name: Build, Test and Publish Pyinstaller Binaries

on:
  workflow_call:
    inputs:
      upload_binaries:
        required: true
        type: string
      python_version:
        required: true
        type: string

jobs:
  build-binaries-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code (for release)
        uses: actions/checkout@v4
        if: ${{ inputs.upload_binaries == 'true' }}
        with:
          fetch-depth: 0

      - name: Checkout source code (for build)
        uses: actions/checkout@v4
        if: ${{ inputs.upload_binaries != 'true' }}
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}

      - name: Set up Poetry
        uses: ./.github/actions/setup-poetry

      - uses: actions/cache@v4
        name: Setup poetry cache
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}-${{ runner.os }}-${{ inputs.python_version }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build linux binary
        uses: ./.github/actions/build-binaries
        with:
          python_version: ${{ inputs.python_version }}
          package_name: "algokit"
          upload_binaries: ${{ inputs.upload_binaries }}
          operating_system: ${{ runner.os }}
          build_command: "poetry run poe package_unix"

  build-binaries-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout source code (for release)
        uses: actions/checkout@v4
        if: ${{ inputs.upload_binaries == 'true' }}
        with:
          fetch-depth: 0

      - name: Checkout source code (for build)
        uses: actions/checkout@v4
        if: ${{ inputs.upload_binaries != 'true' }}
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}

      - name: Set up Poetry
        uses: ./.github/actions/setup-poetry

      - uses: actions/cache@v4
        name: Setup poetry cache
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}-${{ runner.os }}-${{ inputs.python_version }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build windows binary
        uses: ./.github/actions/build-binaries
        with:
          python_version: ${{ inputs.python_version }}
          package_name: "algokit"
          upload_binaries: ${{ inputs.upload_binaries }}
          operating_system: ${{ runner.os }}
          build_command: "poetry run poe package_windows"

  build-binaries-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout source code (for release)
        uses: actions/checkout@v4
        if: ${{ inputs.upload_binaries == 'true' }}
        with:
          fetch-depth: 0

      - name: Checkout source code (for build)
        uses: actions/checkout@v4
        if: ${{ inputs.upload_binaries != 'true' }}
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}

      - name: Set up Poetry
        uses: ./.github/actions/setup-poetry

      - uses: actions/cache@v4
        name: Setup poetry cache
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}-${{ runner.os }}-${{ inputs.python_version }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build macos binary
        uses: ./.github/actions/build-binaries
        with:
          python_version: ${{ inputs.python_version }}
          package_name: "algokit"
          upload_binaries: ${{ inputs.upload_binaries }}
          operating_system: ${{ runner.os }}
          build_command: "poetry run poe package_unix"
