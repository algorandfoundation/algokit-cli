name: Build, Test and Publish Python

on: [workflow_call]

jobs:
  build-python:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        python: ["3.11", "3.12"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: "poetry"

      - name: Install dependencies
        run: poetry install --no-interaction

      # - name: pytest + coverage
      #   shell: bash
      #   run: |
      #     set -o pipefail
      #     poetry run pytest -n auto --junitxml=pytest-junit.xml --cov-report=term-missing:skip-covered --cov=src | tee pytest-coverage.txt

      # - name: pytest coverage comment - using Python 3.10 on ubuntu-latest
      #   if: matrix.python == '3.10' && matrix.os == 'ubuntu-latest'
      #   continue-on-error: true # forks fail to add a comment, so continue any way
      #   uses: MishaKav/pytest-coverage-comment@main
      #   with:
      #     pytest-coverage-path: ./pytest-coverage.txt
      #     junitxml-path: ./pytest-junit.xml

      - name: Install setuptools (3.12 only)
        if: matrix.python == '3.12' && matrix.os == 'windows-latest'
        run: poetry add setuptools

      - name: Build Executable
        run: |
          if ( "${{ matrix.os }}" -eq "windows-latest" ) {
            poetry run pyinstaller --onefile --hidden-import jinja2_ansible_filters --hidden-import multiformats_config --copy-metadata algokit --name algokit --noconfirm src/algokit/__main__.py --add-data ".venv\Lib\site-packages\multiformats_config\multicodec-table.json;multiformats_config\" --add-data ".venv\Lib\site-packages\multiformats_config\multibase-table.json;multiformats_config/" 
          }
          elif  ( "${{ matrix.os }}" == "macos-latest" ) {
            poetry run pyinstaller --onefile --hidden-import jinja2_ansible_filters --hidden-import multiformats_config --copy-metadata algokit --name algokit --noconfirm src/algokit/__main__.py --add-data ".venv/lib/python${{ matrix.python }}/site-packages/multiformats_config/multicodec-table.json:multiformats_config/" --add-data ".venv/lib/python${{ matrix.python }}/site-packages/multiformats_config/multibase-table.json:multiformats_config/" --target-architecture universal2
          }
          else {
            poetry run pyinstaller --onefile --hidden-import jinja2_ansible_filters --hidden-import multiformats_config --copy-metadata algokit --name algokit --noconfirm src/algokit/__main__.py --add-data ".venv/lib/python${{ matrix.python }}/site-packages/multiformats_config/multicodec-table.json:multiformats_config/" --add-data ".venv/lib/python${{ matrix.python }}/site-packages/multiformats_config/multibase-table.json:multiformats_config/"
          }

      - name: Test Executable
        run: |
          if ( "${{ matrix.os }}" == "macos-latest" ); then
            ./dist/algokit-cli-macos-latest-py${{ matrix.python }}/algokit --help
          elif ( "${{ matrix.os }}" == "windows-latest" ); then
            ./dist/algokit-cli-windows-latest-py${{ matrix.python }}/algokit.exe --help
          else
            ./dist/algokit-cli-ubuntu-latest-py${{ matrix.python }}/algokit --help
          fi

      - name: Publish Executable
        uses: actions/upload-artifact@v2
        with:
          name: algokit-cli-${{ matrix.os }}-py${{ matrix.python }}
          path: dist
